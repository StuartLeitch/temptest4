scalar Date
scalar ReferenceNumber
scalar ID
scalar InvoicingName

directive @model(id: ID) on OBJECT
directive @filter(key: InvoicingName) on FIELD_DEFINITION

type Error {
  error: String
}

enum InvoiceStatus {
  DRAFT
  PENDING
  ACTIVE
  FINAL
}

enum CreditNoteReason {
  WITHDRAWN_MANUSCRIPT
  REDUCTION_APPLIED
  WAIVED_MANUSCRIPT
  CHANGE_PAYER_DETAILS
  BAD_DEBT
  OTHER
}

type InvoicingArticle @model(id: "articles") {
  id: String
  journalId: ID @filter
  journalTitle: String
  customId: ID @filter
  created: Date
  title: String
  articleType: String
  authorEmail: String
  authorCountry: String
  authorSurname: String
  authorFirstName: String
  datePublished: Date
  preprintValue: String
}

type Transaction @model(id: "transactions") {
  id: String
  status: String @filter(key: "transactionStatus")
}

type ErpReference {
  entity_id: String
  type: String
  vendor: String
  attribute: String
  value: String
}

enum TransactionStatus {
  DRAFT
  ACTIVE
  FINAL
}

enum PaymentStatus {
  PENDING
  FAILED
  COMPLETED
  CREATED
}

type InvoiceItem @model(id: "invoice_items") {
  id: String
  invoiceId: ID
  manuscriptId: ID
  type: String
  price: Float
  rate: Float
  vat: Float
  vatnote: String
  article: InvoicingArticle
  dateCreated: Date
  coupons: [Coupon]
  waivers: [Waiver]
}

type Invoice @model(id: "invoices") {
  invoiceId: ID
  dateCreated: String
  dateChanged: String
  dateIssued: String
  dateAccepted: String
  dateMovedToFinal: String
  vat: Float
  charge: Float
  status: InvoiceStatus @filter(key: "invoiceStatus")
  payer: Payer
  erpReference: String
  erpReferences: [ErpReference]
  revenueRecognitionReference: String
  referenceNumber: ReferenceNumber @filter
  invoiceItem: InvoiceItem
  title: String
  price: Float
  customId: ID
  type: String
  payment: Payment
  payments: [Payment]
  transaction: Transaction
  creditNote: CreditNote
}

type CreditNote @model(id: "credit_notes") {
  id: String
  invoiceId: ID
  creationReason: String
  vat: Float
  price: Float
  persistentReferenceNumber: ReferenceNumber @filter
  dateCreated: Date
  dateIssued: Date
  dateUpdated: Date
  erpReference: ErpReference
  invoice: Invoice
}

type InvoiceVat {
  vatPercentage: Float
  vatNote: String
  rate: Float
}

type InvoiceId {
  invoiceId: [ID]
}

input AddressInput {
  city: String
  country: String
  state: String
  postalCode: String
  addressLine1: String
}

input PayerInput {
  id: String
  invoiceId: String
  type: PayerType
  name: String
  email: String
  organization: String
  vatId: String
  address: AddressInput
}

type InvoicingJournal {
  id: String
  journalId: ID
  journalTitle: String
  amount: Float
  issn: String
  publisherId: ID
  publisher: InvoicingPublisher
  publisherName: String
  code: String
  # ... (TODO: add missing fields here)
}

enum PayerType {
  INSTITUTION
  INDIVIDUAL
}

type Payer {
  id: String
  type: PayerType
  name: String
  email: String
  organization: String
  address: Address
  vatId: String
}

type Address {
  city: String
  country: String
  state: String
  postalCode: String
  addressLine1: String
}

type InvoicingPublisher {
  id: String
  name: String
}

input CreditCardInput {
  amount: Float!
  cardNumber: String!
  expiration: String!
  cvv: String!
  postalCode: String
}

type Payment {
  id: String
  status: PaymentStatus
  invoiceId: String
  payerId: String
  paymentMethodId: String
  foreignPaymentId: String
  paymentProof: String
  amount: Float
  datePaid: Date
  paymentMethod: PaymentMethod
}

type PayPalOrderId {
  id: String!
}

type PaymentMethod {
  id: String!
  name: String!
  isActive: Boolean
}

type Coupon @model(id: "coupons") {
  id: ID
  reduction: Float
  type: String
  code: String
  dateCreated: Date
  dateUpdated: Date
  expirationDate: Date
  invoiceItemType: String
  redeemCount: Int
  status: String
  name: String
}

type Log {
  id: ID
  userAccount: String
  entity: String
  action: String
  timestamp: Date
  item_reference: String
  target: String
}

type CouponCode {
  code: String
}

input CouponInput {
  id: ID
  reduction: Float
  type: String
  expirationDate: Date
  status: String
  name: String
  code: String
  invoiceItemType: String
}

input CatalogInput {
  journalId: ID
  publisherName: String
  amount: Float
}

type Waiver {
  reduction: Float
  type_id: String
}

type ClientToken {
  token: String!
}

type PaginatedInvoices {
  totalCount: Int
  invoices: [Invoice]
}

type PaginatedCoupons {
  totalCount: Int
  coupons: [Coupon]
}

type PaginatedLogs {
  totalCount: Int
  logs: [Log]
}

type PaginatedPublishers {
  totalCount: Int
  publishers: [InvoicingPublisher]
}
type PaginatedCatalog {
  totalCount: Int
  catalogItems: [InvoicingJournal]
}

type PaginatedCreditNotes {
  totalCount: Int
  creditNotes: [CreditNote]
}
type RemindersStatus {
  confirmation: Boolean
  payment: Boolean
}

enum ReminderType {
  REMINDER_CONFIRMATION
  SANCTIONED_COUNTRY
  REMINDER_PAYMENT
  INVOICE_CREATED
}

type SentReminder {
  forInvoice: ID
  type: ReminderType
  toEmail: String
  when: Date
}

input InvoicingArticleFilters {
  journalId: [ID]
  customId: [ID]
}
input InvoiceItemFilters {
  article: InvoicingArticleFilters
}
input InvoiceFilters {
  reason: [CreditNoteReason]
  invoiceStatus: [InvoiceStatus]
  transactionStatus: [TransactionStatus]
  referenceNumber: [ReferenceNumber]
  invoiceItem: InvoiceItemFilters
}

input LogsFilters {
  startDate: Date
  endDate: Date
  limit: Int
}

input Pagination {
  page: Int
  offset: Int
  limit: Int
}

input MigratePayerAddress {
  addressLine2: String
  addressLine1: String!
  countryCode: String!
  state: String
  city: String!
}

input MigratePayer {
  vatRegistrationNumber: String
  address: MigratePayerAddress!
  organization: String
  email: String!
  name: String!
  type: String!
}

input MigrateAPC {
  invoiceReference: String
  paymentAmount: Float
  manuscriptId: String!
  discount: Float
  price: Float!
  vat: Float
}

type Query {
  getCreditNoteByInvoiceId(invoiceId: ID): CreditNote
  getCreditNoteById(creditNoteId: ID): CreditNote
  getRecentCreditNotes(
    filters: InvoiceFilters
    pagination: Pagination
  ): PaginatedCreditNotes
  getCreditNoteByReferenceNumber(referenceNumber: String): CreditNote
  getPaymentMethods: [PaymentMethod]
  getClientToken: ClientToken
  getPublishers(pagination: Pagination): PaginatedPublishers
  getPublisherDetails(publisherId: ID): InvoicingPublisher
  getPublishersByPublisherId(pagination: Pagination): PaginatedPublishers
  getPublisherByName(publisherName: String): InvoicingPublisher
  generateCouponCode: CouponCode
  invoice(invoiceId: ID): Invoice
  invoiceWithAuthorization(invoiceId: ID): Invoice
  invoiceVat(
    invoiceId: ID
    country: String
    state: String
    postalCode: String
    payerType: String
  ): InvoiceVat
  invoices(filters: InvoiceFilters, pagination: Pagination): PaginatedInvoices
  coupon(couponCode: String!): Coupon
  coupons(pagination: Pagination): PaginatedCoupons
  invoiceIdByManuscriptCustomId(customId: ID): InvoiceId
  invoicingJournals(pagination: Pagination): PaginatedCatalog
  echo(value: String): String
  remindersStatus(invoiceId: ID!): RemindersStatus
  remindersSent(invoiceId: ID!): [SentReminder]
  auditlogs(pagination: Pagination, filters: LogsFilters): PaginatedLogs
  auditlog(logId: ID): Log
}

type Mutation {
  confirmInvoice(payer: PayerInput!): Payer!
  applyCoupon(invoiceId: ID, couponCode: String): Coupon
  updateCoupon(coupon: CouponInput): Coupon
  updateCatalogItem(catalogItem: CatalogInput): InvoicingJournal
  createCoupon(coupon: CouponInput): Coupon
  creditCardPayment(
    invoiceId: ID!
    payerId: String!
    paymentMethodId: String!
    paymentMethodNonce: String!
    amount: Float!
  ): Payment!
  bankTransferPayment(
    invoiceId: String!
    payerId: String!
    paymentMethodId: String!
    paymentReference: String!
    amount: Float!
    datePaid: String!
    markInvoiceAsPaid: Boolean
  ): Payment!
  createCreditNote(
    invoiceId: String!
    createDraft: Boolean
    reason: String
  ): CreditNote!
  createPayPalOrder(invoiceId: ID!): PayPalOrderId!
  recordPayPalPayment(invoiceId: ID!, orderId: ID!): ID!
  generateInvoiceCompensatoryEvents(
    invoiceIds: [String]
    journalIds: [String]
  ): String
  generateCreditNoteCompensatoryEvents(
    creditNoteIds: [String]
    journalIds: [String]
  ): String
  generateInvoiceDraftCompensatoryEvents(
    invoiceIds: [String]
    journalIds: [String]
  ): String
  togglePauseConfirmationReminders(
    invoiceId: ID!
    state: Boolean!
  ): RemindersStatus
  togglePausePaymentReminders(invoiceId: ID!, state: Boolean!): RemindersStatus
}
